<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://sleticalboy.github.io</id><title>sleticalboy</title><subtitle>A minimal, portfolio, sidebar, bootstrap Jekyll theme with responsive web design and focuses on text presentation.</subtitle> <updated>2021-07-07T13:04:05+08:00</updated> <author> <name>sleticalboy</name> <uri>https://sleticalboy.github.io</uri> </author><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="https://sleticalboy.github.io" rel="alternate" type="text/html" /> <generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator> <rights> © 2021 sleticalboy </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>xxx 项目 Android 端重构</title><link href="https://sleticalboy.github.io/articale/2021/04/28/xxx-project-refactor/" rel="alternate" type="text/html" title="xxx 项目 Android 端重构" /><published>2021-04-28T23:21:19+08:00</published> <updated>2021-04-28T23:21:19+08:00</updated> <id>https://sleticalboy.github.io/articale/2021/04/28/xxx-project-refactor/</id> <content src="https://sleticalboy.github.io/articale/2021/04/28/xxx-project-refactor/" /> <author> <name>sleticalboy</name> </author> <category term="articale" /> <summary> 网络模块 后端 API 接口请求 HttpClient 和 AndroidHttpClient 实现 其本质为添加请求头 文件上传与下载 HttpUrlConnection 和 AndroidHttpClient 实现 图片加载中的网络请求 HttpURLConnection 实现 Web 中的网络请求 1、 WebView 拦截部分网络请求 HttpURLConnection 实现 2、Web 调试时下载资源 WebSocket 重构过程 1、隔离层抽取 HttpRequest HttpResponse HttpConfig HttpAdapter 2、调用方式收敛 原有调用方式标记为 Deprecated，统一使用新的调用方式 3、老旧方式移除 若干版本后统一移除原有实现方式 4、底层实现替换 将原有调用方式底层实现替换为新的实现方式 ... </summary> </entry> <entry><title>Java 强软弱虚引用及引用队列</title><link href="https://sleticalboy.github.io/java/2021/04/21/java-reference-and-rq/" rel="alternate" type="text/html" title="Java 强软弱虚引用及引用队列" /><published>2021-04-21T23:15:08+08:00</published> <updated>2021-04-21T23:15:08+08:00</updated> <id>https://sleticalboy.github.io/java/2021/04/21/java-reference-and-rq/</id> <content src="https://sleticalboy.github.io/java/2021/04/21/java-reference-and-rq/" /> <author> <name>sleticalboy</name> </author> <category term="java" /> <summary> 四种引用类型 强引用 new object/array GC 不回收、内存不足时会 OOM 软引用 SoftReference 被软引用引用的对象，只有当内存不足时 GC 才会回收 内存敏感的高速缓存 弱引用 WeakReference 被弱引用引用的对象，只要 GC 就会被回收 虚引用 PhantomReference 虚引用不引用任何对象 当对象被回收时，可以接收到通知 引用队列 ReferenceQueue 引用的对象被回收后，引用会添加到队列中 可通过检查队列中是否有该引用来判断对象是否被回收掉 </summary> </entry> <entry><title>Java 类加载与垃圾回收</title><link href="https://sleticalboy.github.io/java/2021/04/20/java-class-loader-and-gc/" rel="alternate" type="text/html" title="Java 类加载与垃圾回收" /><published>2021-04-20T10:57:10+08:00</published> <updated>2021-04-25T23:02:50+08:00</updated> <id>https://sleticalboy.github.io/java/2021/04/20/java-class-loader-and-gc/</id> <content src="https://sleticalboy.github.io/java/2021/04/20/java-class-loader-and-gc/" /> <author> <name>sleticalboy</name> </author> <category term="java" /> <summary> Android 类加载 protected Class&amp;lt;?&amp;gt; loadClass(String name, boolean resolve) throws ClassNotFoundException { // 1、如果类已被加载，则直接返回 // First, check if the class has already been loaded Class&amp;lt;?&amp;gt; c = findLoadedClass(name); if (c == null) { try { if (parent != null) { // 2.1、如果父类不为空则委托父类加载 c = parent.loadClass(name, false); ... </summary> </entry> <entry><title>Java 数据结构和算法</title><link href="https://sleticalboy.github.io/arithmetic/2021/04/13/java-data-structure-arithmetic/" rel="alternate" type="text/html" title="Java 数据结构和算法" /><published>2021-04-13T21:54:32+08:00</published> <updated>2021-07-07T13:03:21+08:00</updated> <id>https://sleticalboy.github.io/arithmetic/2021/04/13/java-data-structure-arithmetic/</id> <content src="https://sleticalboy.github.io/arithmetic/2021/04/13/java-data-structure-arithmetic/" /> <author> <name>sleticalboy</name> </author> <category term="arithmetic" /> <summary> 数据结构 数组 ArrayList 单链表 双链表 LinkedList 栈 先进后出 队列 算法 数组排序相关 1、冒泡 2、快排 3、二分查找 public static int binarySearch(int[] args, int target) { if (args == null || args.length == 0) return -1; int from = 0, to = args.length - 1, mid = 0; while (from &amp;lt;= to) { mid = (from + to) / 2; if (target &amp;gt; args[mid]) { from = mid + 1; } else if (target &amp;lt; args[mid]) { ... </summary> </entry> <entry><title>HTTP 和 HTTPS</title><link href="https://sleticalboy.github.io/net/2021/04/09/http-and-https/" rel="alternate" type="text/html" title="HTTP 和 HTTPS" /><published>2021-04-09T09:00:07+08:00</published> <updated>2021-04-14T19:14:55+08:00</updated> <id>https://sleticalboy.github.io/net/2021/04/09/http-and-https/</id> <content src="https://sleticalboy.github.io/net/2021/04/09/http-and-https/" /> <author> <name>sleticalboy</name> </author> <category term="net" /> <summary> HTTP 是什么 超文本传输协议 三次握手 建立一个 TCP 连接时，客户端和服务端一共需要发送 3 个包。三次握手的主要作用是确认双方 的发送能力和接收能力是否正常、指定自己的初始化序列号为后面的可靠性传输做准备。实质上 就是连接服务器指定的端口号，建立 TCP 连接，并同步连接双方的序列号和确认号，交换 TCP 窗口大小信息。 1、三次握手过程 一开始的时候，client 处于 closed 状态；server 处于 listen 状态。 进行三次握手： 第一次：客户端给服务端发一个 SYN 报文，同时指明客户端的 ISN，此时客户端处于 SYN_SENT 状态。 第二次：服务端收到客户端的 SYN 报文之后，会以自己的 SYN 报文作为应答，并指定自己的 ISN。 同时把客户端的 ISN + 1 作为 ACK 值，表示自己已收到客户端的 SYN，此时... </summary> </entry> </feed>
