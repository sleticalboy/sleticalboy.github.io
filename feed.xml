<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://sleticalboy.github.io</id><title>sleticalboy</title><subtitle>A minimal, portfolio, sidebar, bootstrap Jekyll theme with responsive web design and focuses on text presentation.</subtitle> <updated>2021-03-25T21:35:57+08:00</updated> <author> <name>sleticalboy</name> <uri>https://sleticalboy.github.io</uri> </author><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="https://sleticalboy.github.io" rel="alternate" type="text/html" /> <generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator> <rights> © 2021 sleticalboy </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>Java 容器之 HashMap（java 8）</title><link href="https://sleticalboy.github.io/java/2021/02/19/java-hashmap/" rel="alternate" type="text/html" title="Java 容器之 HashMap（java 8）" /><published>2021-02-19T21:17:56+08:00</published> <updated>2021-02-21T21:53:30+08:00</updated> <id>https://sleticalboy.github.io/java/2021/02/19/java-hashmap/</id> <content src="https://sleticalboy.github.io/java/2021/02/19/java-hashmap/" /> <author> <name>sleticalboy</name> </author> <category term="java" /> <summary> 重要的字段 transient Node&amp;lt;K,V&amp;gt;[] table 首次使用时才初始化，在 resize() 中重新初始化，数组长度为 0 或 2 的 n 次方 transient int size map 的大小即键值对的个数 final float loadFactor 加载因子，用于 hash 表扩容 transient int threshold 下次数组扩容时的临界值，当达到此临界值时需要对 hash 表进行扩容（capacity * loadFactor） HashMap#put() 方法 作用：添加元素 public V put(K key, V value) { // 首先计算 key 的 hash 值，然后调用 putVal() 存值 return putVal(hash(key), key, value, fals... </summary> </entry> <entry><title>Android 输入子系统3：InputDispatcher 对事件分发</title><link href="https://sleticalboy.github.io/android/2021/02/02/andorid-input-subsystem-3/" rel="alternate" type="text/html" title="Android 输入子系统3：InputDispatcher 对事件分发" /><published>2021-02-02T10:57:35+08:00</published> <updated>2021-02-16T22:42:21+08:00</updated> <id>https://sleticalboy.github.io/android/2021/02/02/andorid-input-subsystem-3/</id> <content src="https://sleticalboy.github.io/android/2021/02/02/andorid-input-subsystem-3/" /> <author> <name>sleticalboy</name> </author> <category term="android" /> <summary> 涉及到的源代码及路径： frameworks/base/core/java/android/view/WindowManagerImpl.java frameworks/base/core/java/android/view/WindowManagerGlobal.java frameworks/base/core/java/android/view/ViewRootImpl.java frameworks/base/services/core/java/com/android/server/wm/Session.java frameworks/base/services/core/java/com/android/server/wm/WindowManagerService.java frameworks/base/services/core/java/com/android/se... </summary> </entry> <entry><title>Android 输入子系统2：EventHub 工作原理</title><link href="https://sleticalboy.github.io/android/2021/01/28/android-input-subsystem-2/" rel="alternate" type="text/html" title="Android 输入子系统2：EventHub 工作原理" /><published>2021-01-28T10:56:13+08:00</published> <updated>2021-02-18T22:31:30+08:00</updated> <id>https://sleticalboy.github.io/android/2021/01/28/android-input-subsystem-2/</id> <content src="https://sleticalboy.github.io/android/2021/01/28/android-input-subsystem-2/" /> <author> <name>sleticalboy</name> </author> <category term="android" /> <summary> 涉及到的源代码及路径： frameworks/native/services/inputflinger/EventHub.cpp frameworks/native/services/inputflinger/InputReader.cpp frameworks/native/services/inputflinger/InputDispatcher.cpp frameworks/native/libs/input/InputTransport.cpp frameworks/base/core/jni/android_view_InputChannel.cpp frameworks/base/core/jni/android_view_InputEventReceiver.cpp 承接上节，本文以 InputReader::loopOnce() 函数开始，从 InputReader... </summary> </entry> <entry><title>linux inotify 机制</title><link href="https://sleticalboy.github.io/linux/2021/01/24/linux-inotify-mechanism/" rel="alternate" type="text/html" title="linux inotify 机制" /><published>2021-01-24T21:08:41+08:00</published> <updated>2021-01-28T22:08:49+08:00</updated> <id>https://sleticalboy.github.io/linux/2021/01/24/linux-inotify-mechanism/</id> <content src="https://sleticalboy.github.io/linux/2021/01/24/linux-inotify-mechanism/" /> <author> <name>sleticalboy</name> </author> <category term="linux" /> <summary> 基本描述 inotify 是 Linux 内核提供的文件系统变化的通知机制，可以用来监控文件系统的变化，如文 件的新建、删除、读写等。 使用 1、int inotify_init(void) 调用该方法创建一个 inotify 对象，返回一个与新的 inotify 事件队列关联的 fd，返 回 -1 表示失败 2、int inotify_add_watch(int fd, const char *pathname, uint32_t mask) 调用该方法将一个或多个监听添加到 inotify 对象中，或者修改已存在的监听对象；返 回 -1 表示失败，返回非负数表示成功 fd 参数表示 inotify_init() 方法的返回值; pathname 参数表示要监控的文件或目录; mask 参数表示要监控的事件，合法的且已实现的事件如下： /* the following... </summary> </entry> <entry><title>linux epoll 机制</title><link href="https://sleticalboy.github.io/linux/2021/01/22/linux-epoll-mechanism/" rel="alternate" type="text/html" title="linux epoll 机制" /><published>2021-01-22T22:06:30+08:00</published> <updated>2021-01-25T20:06:05+08:00</updated> <id>https://sleticalboy.github.io/linux/2021/01/22/linux-epoll-mechanism/</id> <content src="https://sleticalboy.github.io/linux/2021/01/22/linux-epoll-mechanism/" /> <author> <name>sleticalboy</name> </author> <category term="linux" /> <summary> 一次监听多个 fd 的可读/可写状态 基本概念 epoll：是一种 I/O 时间通信机制，是 Linux 内核实现 IO 多路复用的一种方式。 IO 多路复用：在一个操作里同时监听多个输入输出源，在其中一个或多个输入输出源可用的时候 返回，然后对其进行读写操作。 输入输出源：可以是文件（file）、网络（socket）、进程间的管道（pipe），因在 Linux 中 “一切皆文件”，所以都是用文件描述符（fd）来表示 可读事件：当 fd 关联的内核缓冲区非空有数据可读时，则触发可读事件； 可写事件：当 fd 关联的内核缓冲区不满有空闲空间可写时，则触发可写事件； 通知机制：当事件发生时，主动通知； 轮询机制：循环检查是否有事件发生，是通知机制的反面； 再来解读 epoll 机制：当 fd 关联的内核缓冲区非空时，发出可读信号；当缓冲区不满时，发出 可写信号。 epol... </summary> </entry> </feed>
