<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://sleticalboy.github.io</id><title>sleticalboy</title><subtitle>A minimal, portfolio, sidebar, bootstrap Jekyll theme with responsive web design and focuses on text presentation.</subtitle> <updated>2021-04-08T23:38:36+08:00</updated> <author> <name>sleticalboy</name> <uri>https://sleticalboy.github.io</uri> </author><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="https://sleticalboy.github.io" rel="alternate" type="text/html" /> <generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator> <rights> © 2021 sleticalboy </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>Java 线程池</title><link href="https://sleticalboy.github.io/java/2021/04/07/java-thread-pool/" rel="alternate" type="text/html" title="Java 线程池" /><published>2021-04-07T22:43:32+08:00</published> <updated>2021-04-08T23:38:09+08:00</updated> <id>https://sleticalboy.github.io/java/2021/04/07/java-thread-pool/</id> <content src="https://sleticalboy.github.io/java/2021/04/07/java-thread-pool/" /> <author> <name>sleticalboy</name> </author> <category term="java" /> <summary> 核心参数解析 核心线程 非核心线程及存活时间 任务队列 线程工厂 拒绝策略 默认实现有四种: CallerRunsPolicy AbortPolicy DiscardPolicy DiscardOldestPolicy 任务提交 @Override public void execute(Runnable command) { // 不可提交空任务 if (command == null) throw new NullPointerException(); int c = ctl.get(); // 工作线程数目小于核心线程数，则初始化核心线程 if (workerCountOf(c) &amp;lt; corePoolSize) { ... </summary> </entry> <entry><title>Java 面向对象特征与原则</title><link href="https://sleticalboy.github.io/java/2021/04/06/java-oop-principles/" rel="alternate" type="text/html" title="Java 面向对象特征与原则" /><published>2021-04-06T21:43:00+08:00</published> <updated>2021-04-06T21:43:00+08:00</updated> <id>https://sleticalboy.github.io/java/2021/04/06/java-oop-principles/</id> <content src="https://sleticalboy.github.io/java/2021/04/06/java-oop-principles/" /> <author> <name>sleticalboy</name> </author> <category term="java" /> <summary> 面向对象三大特征 封装 属性、方法、安全、简化编程 继承 子类继承父类/实现接口、父类的属性 多态 多实现、方法重载/重写、强转 面向对象五大原则 职责单一原则 一个类应该仅有一个引起它变化的原因 开闭原则 对扩展是开放的，对修改是关闭的 里氏替换原则 基类出现的地方，子类一定可以出现 子类可以替换父类并且出现在父类能够出现的任何地方 面向接口编程 依赖倒置原则 低层依赖高层，实现依赖抽象 接口隔离原则 使用多个专门的接口比使用单个接口要好 迪米特法则 认识的人尽可能少 </summary> </entry> <entry><title>Java 并发容器之 ConcurrentHashMap（java 8）</title><link href="https://sleticalboy.github.io/java/2021/04/05/java-concurrent-hashmap/" rel="alternate" type="text/html" title="Java 并发容器之 ConcurrentHashMap（java 8）" /><published>2021-04-05T22:50:35+08:00</published> <updated>2021-04-05T22:50:35+08:00</updated> <id>https://sleticalboy.github.io/java/2021/04/05/java-concurrent-hashmap/</id> <content src="https://sleticalboy.github.io/java/2021/04/05/java-concurrent-hashmap/" /> <author> <name>sleticalboy</name> </author> <category term="java" /> <summary> #put() 方法 public V put(K key, V value) { // 插入数据 return putVal(key, value, false); } final V putVal(K key, V value, boolean onlyIfAbsent) { // key 和 value 均不能为 null，HashMap key 和 value 均可为 null if (key == null || value == null) throw new NullPointerException(); // 计算 hash 值，比 HashMap 多了一步 int hash = spread(key.hashCode()); int binCount = 0; // 节点数，用于控制链表进化为 tree 或者... </summary> </entry> <entry><title>Java 容器之 HashMap（java 8）</title><link href="https://sleticalboy.github.io/java/2021/02/19/java-hashmap/" rel="alternate" type="text/html" title="Java 容器之 HashMap（java 8）" /><published>2021-02-19T21:17:56+08:00</published> <updated>2021-04-04T22:34:12+08:00</updated> <id>https://sleticalboy.github.io/java/2021/02/19/java-hashmap/</id> <content src="https://sleticalboy.github.io/java/2021/02/19/java-hashmap/" /> <author> <name>sleticalboy</name> </author> <category term="java" /> <summary> 重要的字段 transient Node&amp;lt;K,V&amp;gt;[] table 首次使用时才初始化，在 resize() 中重新初始化，数组长度为 0 或 2 的 n 次方 transient int size map 的大小即键值对的个数 final float loadFactor 加载因子，用于 hash 表扩容 transient int threshold 下次数组扩容时的临界值，当达到此临界值时需要对 hash 表进行扩容（capacity * loadFactor） HashMap#put() 方法 作用：添加元素 public V put(K key, V value) { // 首先计算 key 的 hash 值，然后调用 putVal() 存值 return putVal(hash(key), key, value, fals... </summary> </entry> <entry><title>Android 输入子系统3：InputDispatcher 对事件分发</title><link href="https://sleticalboy.github.io/android/2021/02/02/andorid-input-subsystem-3/" rel="alternate" type="text/html" title="Android 输入子系统3：InputDispatcher 对事件分发" /><published>2021-02-02T10:57:35+08:00</published> <updated>2021-02-16T22:42:21+08:00</updated> <id>https://sleticalboy.github.io/android/2021/02/02/andorid-input-subsystem-3/</id> <content src="https://sleticalboy.github.io/android/2021/02/02/andorid-input-subsystem-3/" /> <author> <name>sleticalboy</name> </author> <category term="android" /> <summary> 涉及到的源代码及路径： frameworks/base/core/java/android/view/WindowManagerImpl.java frameworks/base/core/java/android/view/WindowManagerGlobal.java frameworks/base/core/java/android/view/ViewRootImpl.java frameworks/base/services/core/java/com/android/server/wm/Session.java frameworks/base/services/core/java/com/android/server/wm/WindowManagerService.java frameworks/base/services/core/java/com/android/se... </summary> </entry> </feed>
